Introducing jMailFinch
----------------------

MailFinch is snail-mail made easy. Send physical letters, invoices, receipts, and anything else.
For more information, see the website: https://www.mailfinch.com

jMailFinch implements an object-oriented Java interface to the MailFinch mailing API,
allowing you to create, manage, and send your letters.


Installation
------------

In order to use jMailFinch, you can simply download the JAR (see the "Downloads" page)
with or without source code, and add it to your project!
Alternatively, you can save the Java source files and add them directly to your project.


Getting Started
---------------

jMailFinch contains only a few classes that are important to you:

* MailFinch - Your main access point to the library.
* Letter - Provides access to the data and functionality of a single letter.
* Address - Contains the various fields of an address.
* MailFinchException - An exception thrown by the library when errors occur.

Once you know the basics of the above classes, you will be able to use jMailFinch very easily.
If you need any more information than what's on this page, take a look at the full documentation!


The MailFinch Class
-------------------

// Instantiate a new MailFinch object with the following code:
MailFinch mail = new MailFinch('api-key-goes-here');

// Now we can create a new letter easily:
Letter newLetter = mail.newLetter();

// We can also get all the letters in our account:
ArrayList<Letter> allLetters = mail.getAllLetters();

// Or we could get an existing letter by its ID number:
Letter existingLetter = mail.getLetter(123);


The Address Class
-----------------

// Let's create a new address structure:
Address address = new Address();
address.setName("Mr. President");
address.setStreet1("1600 Pennsylvania Avenue NW");
// address.setStreet2("Apt. #4"); // This is optional.
address.setCity("Washington");
address.setState("DC");
address.setZip("20500");
address.setCountry("United States of America"); // This is optional.

// If we need to retrieve those fields again, we can do so via the following method:
address.getName();
address.getStreet1();
address.getStreet2();
address.getCity();
address.getState();
address.getZip();
address.getCountry();

// Is this a valid address?
address.isValid();


The Letter Class
----------------

// Now that we have our main MailFinch object and an Address structure, let's make a complete Letter:
newLetter.setDocumentURL("http://www.irs.gov/pub/irs-pdf/fw9.pdf"); // This must be a valid PDF document.
newLetter.setSender(address);
newLetter.setRecipient(address);

// Let's set the letter's mailing date to today:
Date mailingDate = new Date();
newLetter.setMailingDate(mailingDate);

// Finally, let's save the letter onto the MailFinch system and try to purchase it!
newLetter.save();
newLetter.purchase();

// We can check the status of the letter:
String status = newLetter.getStatus();
System.out.println(status);

// We can also get the letter's assigned ID for future reference:
int id = newLetter.getID();


Just a few more examples...
---------------------------

// Purchase every letter (this could get pricey!):
for (Letter letter : mail.getAllLetters()) {
	try {
		letter.purchase();
		System.out.println("Just bought " + letter.getID() + "!");
	} catch (MailFinchException e) {
		System.out.println("Letter " + letter.getID()
				+ "can't be bought. Has the mailing date already passed?");
	}
}